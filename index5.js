// чтобы обратиться к этой библиотеки мы импортируем его как обычный модуль через директиву require. 
var express = require('express');

var bodyParser = require('body-parser') // подключаем body parser


// Этот модуль вернет нам функцию, поэтому мы должны ее вызвать. Теперь через переменную app мы получим
// все те функции которые доступны в библиотеки express, (подключиться к серверу, обрабатывать ссылки итд)
var app = express();


var urlencodedParser = bodyParser.urlencoded({ extended: false });// взяли эту строку из документации для того
// чтобы здесь брать все данные из формы из post запроса и обрабатывать их

app.set('view engine', 'ejs');


// указывваем здесь какой 'view engine' - (шаблонизатор) будем использовать (подробнее какой движок будем использовать 
// для шаблонизации файлов), первый параметр собственно сам view engine, а второй параметр какой шаблонизатор используем- ejs
// все шаблоны которые мы будем отображать ищутся в папке - views, поэтому мы создали такую папку и в ней файл.ejs куда поместили html код
 

// Прописываем путь к подключению статистических файлов 
app.use('/public', express.static('public'));



// теперь мы будем отображать html файлы в браузере, на 13 строке мы используем метод sendFile() , и в нем 
// мы прописываем путь к html файлу ипользуя __dirname. При нахождении на данной '/' на странице откроется файл index.html 
app.get('/', function(req, res) {
    res.render('index');

});

// Тоже прописали также только указали другой html файл 

app.get('/about', function(req, res) {
    res.render('about');
});

// чтобы отобразить (вывести) наш html файл (news.ejs) с изменичивым значением id мы используем метод 
// render() - (render ищет файлы которые уже находятся в папке 'views') и передаем в него название файла (без расширения)  
// и второй параметр будет обьект который мы будем передавать (вносить изменения) в news.ejs
// Это означает что в шаблон news.ejs будет передано свойство newsID и у этого newsID будет значение которое
// равно тому id которое будет в нашем url адресе вбито.
app.get('/news/:id', function(req, res) {

    console.log(req.query) // выводим в консоль данные из url запроса (get) 
    var obj = {title: 'Новость', id: 4, paragraphs: ['Наш прарграф', 'обычный текст', 'что то еще: 22, 42, sw, 2', 'как дела?']};
        
        // здесь осталяем все как есть
    res.render('news', {newsID: req.params.id, newParam: 221, nash_obj: obj}); 
    

// Также мы можем передавть обьекты. На 52 строке мы создаем сам обьект (фигурные скобки говорят об этом)
// В этих скобках будет указываться title пусть 'новость' и id: '4'. В 48 строке даем этому обьекту название
// nash_obj (свойство) по которому мы будем выводить сам этот обьект. Далее см на страницу news.ejs


// Добавляем в обьект (obj) в качестве третьего его праметра  - массив данных paragraphs. 

app.post('/about', urlencodedParser, function(req, res) {
    if (!req.body) return res.sendStatus(400); // проверка если у нас нет данных переданных 
    // из формы то у нас возвратится ошибка 400 

    console.log(req.body); // если данные получены то мы их выводем в консоль
    res.render('about-success', {data: req.body}); // создали новый шаблон about-success и будем данные на сам шаблон
});

     


});


// Отслеживание сервера по порту. Как мы можем заметить, отслеживание сервера через библиотеку express происходит проще.  
app.listen(3000);


